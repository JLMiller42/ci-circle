title: Continuous integration
tagline: Use CI
description: A sparkles course.
tags:
  - Continuous Integration
template:
    name: continuous-integration
    repo: ci-docs-project-template
before:
  # open issue 1 (welcome)
- type: createIssue
  title: Welcome
  body: 01.1_welcome.md

# Repo artifacts:
# 1. Issue: Welcome
# 2. PR: [title created by learner] - broken code
# 3. PR: Customize the build
# REMOVED! 4. PR: Add links to our docs
# 5. PR: New feature
# 6. PR: Add continuous deployment
# 7. Issue: Congratulations
# @feedback-needed: I'm trying numbering issues based on their issue or PR, instead of based on the step number. +1 or -1?

steps:

# 1 - Enable CI
- title: Enable continuous integration
  description: Enable continuous integration on this repository.
  event: status
  actions: 
  
  # @todo check for event: status.context == ci/circleci

  # validates they turned on CI
  - type: respond
    issue: Welcome
    with: 01.2_congratulations.md
  
  # asks learner to open new PR
  - type: respond
    issue: Welcome
    with: 01.3_next-steps.md

# 2 - Add new code
- title: Add new code
  description: Learn how to use CI by introducing and building some code.
  event: pull_request.opened
  actions:

  # introduces learner to the build status at the provider page (or the checks tab?), asks learner to commit a fix
  - type: respond
    with: 02.1_build-status.md

# 3 - Fix the broken build
- title: Fix the broken build
  description: Act on a build from continuous integration. 
  event: pull_request.synchronize
  actions:

  # explaining waiting for the build, merge when done
  - type: respond
    with: 02.2_await-build.md

# 4 - Merge your fix
- title: Merge your fix
  description: Merge the fix to kick off a new build
  event: pull_request.closed
  actions:

  # @todo check whether PR 2 with broken code was merged

  # create a pull request customizing the config file
  - type: createPullRequest
    title: Customize the build
    body: 03.1_customize-the-build.md
    head: custom-build # @todo grab branch from the template repo for PR 3: Customize the build 
    comments:
      # asks learner to add the link checker
      - 03.2_add-validation.md 
  
  # ask the learner to go to the next PR  
  - type: respond
    with: 02.3_go-to-customize-build.md


# 5 - Add validation
- title: Add validation
  description: Add some automated validation to your project.
  event: pull_request.synchronize   # learner added a link checker
  actions:

  # merge some broken links in
  - type: mergeBranch
    head: add-links

  - type: respond
    with: 03.3_protect-branch.md # asks the learner to turn on branch protection, and then approve the PR

# 6 - Protect a branch based on the CI build status
- title: Protect a branch
  description: Require that CI returns a successful status before a PR can be merged.
  event: pull_request_review.submitted # @todo check that the review is an approval for PR 4

  actions:

  # make sure learner turned on branch protection
  - type: octokit
    method: repos.getBranchProtection
    owner: '%payload.repository.owner.login%'
    repo: '%payload.repository.name%'
    branch: master

  # tell the learner the branch is protected and to merge
  - type: respond
    with: 03.4_branch-protected.md

# 7 - Merge the PR
- title: Merge code with a successful build
  description: Merge your code.
  event: pull_request.closed

  actions:

  # introduces a new feature into the codebase, asks learner to add a unit test
  - type: createPullRequest #PR 5
    title: New feature
    body: 05.1_feature.md
    head: new-feature # @todo grab branch from the template repo for PR 5: New feature

  - type: respond
    with: 03.5_go-to-feature-pr.md # points learner to feature PR

# 8 - Add a unit test
- title: Add a unit test
  description: Practice test drive development by adding a unit test.
  event: pull_request.synchronize #PR 5 with the addition of a unit test

  actions:

  # tells the learner to merge their new PR with unit test
  - type: respond
    with: 05.2_merge.md

# 9 - Merge your unit test
- title: Merge your unit test
  description: Merge the test.
  event: pull_request.closed

  actions:

  # teaches the learner about continuous deployment with the introduction of the stage in the config
  - type: createPullRequest # PR 6: add CD
    title: Add continuous deployment
    body: 06.1_deploy.md
    head: add-deploy # @todo grab branch from the template repo for PR 6: Add CD

  # asks the learner to merge the deployment
  - type: respond
    issue: New feature
    with: 05.3_merge-deployment.md

# 10 - Deploy
- title: Deploy
  description: Add continuous deployment to your pipeline.
  event: pull_request.closed # @todo check that the proper PR was merged, PR 5: new feature

  actions:

  # points the learner to the deployment, constrasts with continuous delivery
  - type: respond
    with: 06.2_see-deployed.md

  # @todo create additional PRs for continued study

  # final issue
  - type: createIssue
    title: Congratulations
    body: 07.1_congratulations.md