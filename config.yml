title: Continuous integration
tagline: Use CI
description: A :sparkles: course.
tags:
  - Continuous Integration
template:
    name: continuous-integration
    repo: 
before:
  # open welcome issue
  # - response: 00.1_welcome.md

# Repo artifacts: TBD

steps:

# 1 - Enable Circle CI
#  event: status.context == ci/circleci
#  - action: respond
#      response: 01.1_congratulations.md
#               > validates they turned on CI
#  @feedback-needed: should the next steps be its own issue?
#  - action: respond
#      response: 01.2_next-steps.md
#               > asks learner to open new PR
#   @template-repo: needs branch with broken code

# 2 - See a broken build
# event: pr.opened
# - action: closeIssue
#     response: 02.1_close-welcome.md
#             > closes the welcome issue
# - action: respond
#     response: 02.2_build-status.md
#             > introduces learner to the build status at the provider page (or the checks tab?)
#             > asks learner to commit a fix

# 3 - Fix the broken build
# event: pr.synchronized (learner commits)
# - action: respond
#     response: 03.1_await-build.md
#             > messaging explaining waiting for the build, merge when done

# 4 - Merge your first PR
# event: pr.closed (+ merged)
# - action: createIssue
#     response: 04.1_customize-the-build.md
#             > introduce the learner to the config, ask them to open a PR with a templated config
#             @template-repo: needs branch with straightforward or blank config

# 5 - Configure the CI provider
# event: pr.opened
# - action: respond
#     response: 05.1_add-a-test.md
#             > asks learner to add the link checker

# 6 - Add a test
# event: pr.synchronized
# - action: respond
#     @feedback-needed: can we realistically manage the codebase and the content for, say, a documentation project in the same repo? should we? if not, how do we do this?
#     response: 06.1_broken-links.md
#             > learner reads build for broken links, is asked to fix them
# - action: newPullRequest
#     @template-repo: needs to have broken links in the initial codebase
#     @template-repo: needs a branch fixing broken links
#     response: 06.2_fix-broken-links.md
#             > the OP for the PR fixing the broken links, opened by the bot
# - action: respond
#     response: 06.3_protect-branch.md
#             > asks the learner to turn on branch protection, and then approve the PR

# 7 - Protect a branch based on the CI build status
# event: pullRequestReview.approved
# - action: getBranchProtection (octokit)
# @template-repo: needs branch introducing a new feature
# - action: newPullRequest
#     response: 07.1_feature.md
#             > introduces a new feature into the codebase, asks learner to add a unit test
# - action: mergePullRequest
#     response: 07.2_go-to-feature-pr.md
#             > points learner to feature PR

# 8 - Add a unit test
# event: pr.synchronized
# @template-repo needs a branch with the deploy stage in the CI config file
# - action: newPullRequest
#     response: 08.1_deploy.md
#             > teaches the learner about continuous deployment with the introduction of the stage in the config
# - action: respond
#     response: 08.2_merge.md
#             > tells the learner to merge their PR

# 9 - Deploy
# event: pr.closed (merged)
# - action: respond
#     response: 09.1_deployed.md
#             > points the learner to the deployment, constrasts with continuous delivery
# @template-repo needs a few branches with commits that will return various responses from the CI provider
# - action: newPullRequest
# - action: createIssue
#     response: 09.congratulations.md
#             > points learner to new PRs to learn more, says bye :tada:

# @feedback-needed: we have the ability to make a CI build status its own step each time we're waiting for the provider to build something. When the CI reports back a status, that step is marked as completed. If the CI does not report a status (say, it gets stuck in pending) that step isn't completed. Should we? 